# (C) Copyright 2025, SECO Mind Srl
#
# SPDX-License-Identifier: Apache-2.0

name: End to end tests

on:
  pull_request:
  push:
    branches:
      - master
      - release-*

env:
  RUST_LOG: debug

jobs:
  end-to-end-test:
    runs-on: ubuntu-latest
    concurrency:
      group: end-to-end-test-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        msghub-version: ["v0.7.2"]
        grpc-version: ["1.69.0"]
    steps:
      - name: Checkout C++ client
        uses: actions/checkout@v4
        with:
          path: astarte-device-sdk-cpp
      - name: Create Astarte Cluster
        uses: astarte-platform/astarte-cluster-action@v1
        with:
          astarte_version: "1.2.1-alpha.0"
      - name: Install interfaces
        working-directory: ./astarte-device-sdk-cpp/.github/workflows
        timeout-minutes: 3
        run: ./install_interfaces.sh $GITHUB_WORKSPACE/astarte-device-sdk-cpp/end_to_end/interfaces
      - name: Register a device new device
        run: |
          APPENGINE_TOKEN=$(astartectl utils gen-jwt appengine)
          DEVICE_ID=$(astartectl utils device-id generate-random)
          CREDENTIALS_SECRET=$(astartectl pairing agent register --compact-output -- "$DEVICE_ID")
          echo "E2E_REALM=test" >> $GITHUB_ENV
          echo "E2E_APPENGINE_TOKEN=$APPENGINE_TOKEN" >> $GITHUB_ENV
          echo "E2E_APPENGINE_URL=https://api.autotest.astarte-platform.org/appengine" >> $GITHUB_ENV
          echo "E2E_PAIRING_URL=https://api.autotest.astarte-platform.org/pairing" >> $GITHUB_ENV
          echo "E2E_DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          echo "E2E_CREDENTIALS_SECRET=$CREDENTIALS_SECRET" >> $GITHUB_ENV
      - name: Install gRPC dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential autoconf libtool pkg-config
      - name: Check out the gRPC repo
        run: git clone --recurse-submodules -b v${{ matrix.grpc-version }} --depth 1 --shallow-submodules https://github.com/grpc/grpc
      - name: Set MY_INSTALL_DIR variable
        run: |
          MY_INSTALL_DIR=$PWD/grpc-install
          echo "MY_INSTALL_DIR=$MY_INSTALL_DIR" >> $GITHUB_ENV
          mkdir -p $MY_INSTALL_DIR
          echo "$MY_INSTALL_DIR" >> "$GITHUB_PATH"
      - name: Restore cached gRPC build directory
        id: cache-grpc-cpp-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./grpc/cmake
            ./grpc-install
          key: grpc-cpp-v${{ matrix.grpc-version }}
      - name: Compile from source gRPC
        if: steps.cache-grpc-cpp-restore.outputs.cache-hit != 'true'
        run: |
          mkdir ./grpc/cmake/build
          pushd ./grpc/cmake/build
          cmake -DgRPC_INSTALL=ON \
                -DgRPC_BUILD_TESTS=OFF \
                -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
                ../..
          make -j $(nproc)
          make install
          popd
      - name: Cache the gRPC build directory
        if: steps.cache-grpc-cpp-restore.outputs.cache-hit != 'true'
        id: cache-grpc-cpp-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./grpc/cmake
            ./grpc-install
          key: ${{ steps.cache-grpc-cpp-restore.outputs.cache-primary-key }}
      - name: Checkout message hub
        uses: actions/checkout@v4
        with:
          repository: astarte-platform/astarte-message-hub
          path: astarte-message-hub
          ref: ${{ matrix.msghub-version }}
      - name: Fill in message hub config
        working-directory: ./astarte-message-hub
        run: |
          echo "realm = \"$E2E_REALM\"" > message-hub-config.toml
          echo "pairing_url = \"$E2E_PAIRING_URL\"" >> message-hub-config.toml
          echo "grpc_socket_port = 50051" >> message-hub-config.toml
          echo "device_id = \"$E2E_DEVICE_ID\"" >> message-hub-config.toml
          echo "credentials_secret = \"$E2E_CREDENTIALS_SECRET\"" >> message-hub-config.toml
          echo "store_directory = \"./tmp\"" >> message-hub-config.toml
          cat message-hub-config.toml
      - name: Create folder for message hub binary
        run: |
          mkdir ./astarte-message-hub/target
          mkdir ./astarte-message-hub/target/release
      - name: Restore cached astarte-message-hub binary
        id: cache-astarte-message-hub-restore
        uses: actions/cache/restore@v4
        with:
          path: ./astarte-message-hub/target/release/astarte-message-hub
          key: astarte-message-hub-${{ matrix.msghub-version }}
      - name: Build message hub
        if: steps.cache-astarte-message-hub-restore.outputs.cache-hit != 'true'
        run: cargo build --release
        working-directory: ./astarte-message-hub
      - name: Save message hub binary
        if: steps.cache-astarte-message-hub-restore.outputs.cache-hit != 'true'
        id: cache-astarte-message-hub-save
        uses: actions/cache/save@v4
        with:
          path: ./astarte-message-hub/target/release/astarte-message-hub
          key: ${{ steps.cache-astarte-message-hub-restore.outputs.cache-primary-key }}
      - name: Run message hub
        working-directory: ./astarte-message-hub
        run: nohup ./target/release/astarte-message-hub > nohup.out 2> nohup.err < /dev/null &
      - name: Fill in C++ client config
        working-directory: ./astarte-device-sdk-cpp/end_to_end
        run: |
          echo "server_addr = \"localhost:50051\"" > config.toml
          echo "node_id = \"aa04dade-9401-4c37-8c6a-d8da15b083ae\"" >> config.toml
          echo "realm = \"$E2E_REALM\"" >> config.toml
          echo "appengine_url = \"$E2E_APPENGINE_URL\"" >> config.toml
          echo "appengine_token = \"$E2E_APPENGINE_TOKEN\"" >> config.toml
          echo "device_id = \"$E2E_DEVICE_ID\"" >> config.toml
          cat config.toml
      - name: Build the end to end tests
        working-directory: ./astarte-device-sdk-cpp
        run: ./end_to_end.sh --fresh --system_grpc
      - name: Run the end to end tests
        working-directory: ./astarte-device-sdk-cpp
        run: ./end_to_end/build/end_to_end_runner
